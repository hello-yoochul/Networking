package main.java.utils;

import main.java.model.request.RequestPayload;
import main.java.model.response.HttpStatus;
import main.java.model.response.ResponsePayload;
import main.java.server.WebServer;

import java.io.*;
import java.net.InetAddress;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Utility class for logging.
 * It will append each client log onto the designated log file.
 *
 * @author Yoochul Kim
 */
public class LogUtil {
    private static final Logger LOGGER = Logger.getLogger(LogUtil.class.getName());
    private static Path LOG_DIRECTORY = Paths.get("logs");
    private static StringBuilder sb = new StringBuilder();

    /**
     * Log the client request and response generated by the server.
     */
    public static void printLog(InetAddress clientIp, RequestPayload request, ResponsePayload response){
        LOGGER.log(Level.INFO, "LogUtil::printLog BEGIN");
        sb.setLength(0);
        String format = "%-16s: %s\n";
        sb.append("\n-------------------- Client Request Log --------------------\n")
                .append(String.format(format, "Client IP", clientIp))
                .append(String.format(format, "Date/Time", LocalDateTime.now()))
                .append(String.format(format, "Request Line", request.getRequestLineForLogging()))
                .append(String.format(format, "Server Response", response.toLiteString()));

        try(FileWriter fw = new FileWriter(Files.createDirectories(LOG_DIRECTORY) + "/log.txt", true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter out = new PrintWriter(bw))
        {
            out.println(sb);
        } catch (IOException e) {
            //exception handling left as an exercise for the reader
            LOGGER.log(Level.WARNING, "Error occurred during writing log");
            if (LOGGER.getLevel() == Level.FINEST) e.printStackTrace();
        }
    }
}
